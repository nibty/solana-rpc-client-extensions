{"version":3,"sources":["../../env-shim.ts","../../test/decode.test.ts"],"names":["test","stakeAccountCodec","stakeHistoryCodec"],"mappings":"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","file":"decode.test.js","sourcesContent":["// Clever obfuscation to prevent the build system from inlining the value of `NODE_ENV`\nexport const __DEV__ = /* @__PURE__ */ (() =>\n  (process as any)['en' + 'v'].NODE_ENV === 'development')();\n","import test from 'ava';\nimport { stakeAccountCodec, stakeHistoryCodec } from '../src';\n\nconst data = new Uint8Array([\n  1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 133, 0, 79, 231, 141, 29, 73, 61,\n  232, 35, 119, 124, 168, 12, 120, 216, 195, 29, 12, 166, 139, 28, 36, 182, 186,\n  154, 246, 149, 224, 109, 52, 100, 133, 0, 79, 231, 141, 29, 73, 61, 232, 35,\n  119, 124, 168, 12, 120, 216, 195, 29, 12, 166, 139, 28, 36, 182, 186, 154,\n  246, 149, 224, 109, 52, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0,\n]);\n\nconst stakeHistoryData = new Uint8Array([\n  1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0,\n  0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0,\n]);\n\ntest('decode stake', (t) => {\n  // As long as we get the 4-byte enum and the first field right, then\n  // we're sure the rest works out\n  const unpacked = stakeAccountCodec.decode(data);\n  t.is(unpacked.meta.rentExemptReserve, 2282880n);\n});\n\ntest('decode stake history', (t) => {\n  // As long as we get the 4-byte enum and the first field right, then\n  // we're sure the rest works out\n  const unpacked = stakeHistoryCodec.decode(stakeHistoryData);\n  t.is(unpacked.length, 1);\n  t.is(unpacked[0].epoch, 2n);\n  t.is(unpacked[0].effective, 3n);\n  t.is(unpacked[0].activating, 4n);\n  t.is(unpacked[0].deactivating, 5n);\n});\n"]}