{"version":3,"sources":["../../src/delegation.ts","../../src/stake.ts","../../src/rpc.ts"],"names":["getStructCodec","fixCodecSize","getBytesCodec","getU64Codec","getU32Codec","getArrayCodec","fetchEncodedAccount","assertAccountExists","stakeAccount","decodeAccount","SYSVAR_STAKE_HISTORY_ADDRESS","stakeHistory"],"mappings":"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","file":"index.js","sourcesContent":["import { Delegation, StakeHistoryEntry } from './stake';\n\nconst WARMUP_COOLDOWN_RATE = 0.09;\n\nexport interface StakeActivatingAndDeactivating {\n  deactivationEpoch: bigint;\n  activationEpoch: bigint;\n  effective: bigint;\n  activating: bigint;\n  deactivating: bigint;\n}\n\nexport interface EffectiveAndActivating {\n  effective: bigint;\n  activating: bigint;\n}\n\nfunction getStakeHistoryEntry(\n  epoch: bigint,\n  stakeHistory: StakeHistoryEntry[]\n): StakeHistoryEntry | null {\n  for (const entry of stakeHistory) {\n    if (entry.epoch === epoch) {\n      return entry;\n    }\n  }\n  return null;\n}\n\nfunction getStakeAndActivating(\n  delegation: Delegation,\n  targetEpoch: bigint,\n  stakeHistory: StakeHistoryEntry[]\n): EffectiveAndActivating {\n  if (delegation.activationEpoch === delegation.deactivationEpoch) {\n    // activated but instantly deactivated; no stake at all regardless of target_epoch\n    return {\n      effective: BigInt(0),\n      activating: BigInt(0),\n    };\n  } else if (targetEpoch === delegation.activationEpoch) {\n    // all is activating\n    return {\n      effective: BigInt(0),\n      activating: delegation.stake,\n    };\n  } else if (targetEpoch < delegation.activationEpoch) {\n    // not yet enabled\n    return {\n      effective: BigInt(0),\n      activating: BigInt(0),\n    };\n  }\n\n  let currentEpoch = delegation.activationEpoch;\n  let entry = getStakeHistoryEntry(currentEpoch, stakeHistory);\n  if (entry !== null) {\n    // target_epoch > self.activation_epoch\n\n    // loop from my activation epoch until the target epoch summing up my entitlement\n    // current effective stake is updated using its previous epoch's cluster stake\n    let currentEffectiveStake = BigInt(0);\n    while (entry !== null) {\n      currentEpoch++;\n      const remaining = delegation.stake - currentEffectiveStake;\n      const weight = Number(remaining) / Number(entry.activating);\n      const newlyEffectiveClusterStake =\n        Number(entry.effective) * WARMUP_COOLDOWN_RATE;\n      const newlyEffectiveStake = BigInt(\n        Math.max(1, Math.round(weight * newlyEffectiveClusterStake))\n      );\n\n      currentEffectiveStake += newlyEffectiveStake;\n      if (currentEffectiveStake >= delegation.stake) {\n        currentEffectiveStake = delegation.stake;\n        break;\n      }\n\n      if (\n        currentEpoch >= targetEpoch ||\n        currentEpoch >= delegation.deactivationEpoch\n      ) {\n        break;\n      }\n      entry = getStakeHistoryEntry(currentEpoch, stakeHistory);\n    }\n    return {\n      effective: currentEffectiveStake,\n      activating: delegation.stake - currentEffectiveStake,\n    };\n  } else {\n    // no history or I've dropped out of history, so assume fully effective\n    return {\n      effective: delegation.stake,\n      activating: BigInt(0),\n    };\n  }\n}\n\nexport function getStakeActivatingAndDeactivating(\n  delegation: Delegation,\n  targetEpoch: bigint,\n  stakeHistory: StakeHistoryEntry[]\n): StakeActivatingAndDeactivating {\n  const { effective, activating } = getStakeAndActivating(\n    delegation,\n    targetEpoch,\n    stakeHistory\n  );\n\n  // then de-activate some portion if necessary\n  if (targetEpoch < delegation.deactivationEpoch) {\n    return {\n      deactivationEpoch: delegation.deactivationEpoch,\n      activationEpoch: delegation.activationEpoch,\n      effective,\n      activating,\n      deactivating: BigInt(0),\n    };\n  } else if (targetEpoch === delegation.deactivationEpoch) {\n    // can only deactivate what's activated\n    return {\n      deactivationEpoch: delegation.deactivationEpoch,\n      activationEpoch: delegation.activationEpoch,\n      effective,\n      activating: BigInt(0),\n      deactivating: effective,\n    };\n  }\n  let currentEpoch = delegation.deactivationEpoch;\n  let entry = getStakeHistoryEntry(currentEpoch, stakeHistory);\n  if (entry !== null) {\n    // target_epoch > self.activation_epoch\n    // loop from my deactivation epoch until the target epoch\n    // current effective stake is updated using its previous epoch's cluster stake\n    let currentEffectiveStake = effective;\n    while (entry !== null) {\n      currentEpoch++;\n      // if there is no deactivating stake at prev epoch, we should have been\n      // fully undelegated at this moment\n      if (entry.deactivating === BigInt(0)) {\n        break;\n      }\n\n      // I'm trying to get to zero, how much of the deactivation in stake\n      //   this account is entitled to take\n      const weight = Number(currentEffectiveStake) / Number(entry.deactivating);\n\n      // portion of newly not-effective cluster stake I'm entitled to at current epoch\n      const newlyNotEffectiveClusterStake =\n        Number(entry.effective) * WARMUP_COOLDOWN_RATE;\n      const newlyNotEffectiveStake = BigInt(\n        Math.max(1, Math.round(weight * newlyNotEffectiveClusterStake))\n      );\n\n      currentEffectiveStake -= newlyNotEffectiveStake;\n      if (currentEffectiveStake <= 0) {\n        currentEffectiveStake = BigInt(0);\n        break;\n      }\n\n      if (currentEpoch >= targetEpoch) {\n        break;\n      }\n      entry = getStakeHistoryEntry(currentEpoch, stakeHistory);\n    }\n\n    // deactivating stake should equal to all of currently remaining effective stake\n    return {\n      deactivationEpoch: delegation.deactivationEpoch,\n      activationEpoch: delegation.activationEpoch,\n      effective: currentEffectiveStake,\n      deactivating: currentEffectiveStake,\n      activating: BigInt(0),\n    };\n  } else {\n    return {\n      deactivationEpoch: BigInt(0),\n      activationEpoch: BigInt(0),\n      effective: BigInt(0),\n      activating: BigInt(0),\n      deactivating: BigInt(0),\n    };\n  }\n}\n","import {\n  fixCodecSize,\n  getArrayCodec,\n  getBytesCodec,\n  getStructCodec,\n  getU32Codec,\n  getU64Codec,\n} from '@solana/codecs';\nimport type { ReadonlyUint8Array } from '@solana/codecs';\n\nconst authorizedCodec = getStructCodec([\n  ['staker', fixCodecSize(getBytesCodec(), 32)],\n  ['withdrawer', fixCodecSize(getBytesCodec(), 32)],\n]);\nconst lockupCodec = getStructCodec([\n  ['unixTimestamp', getU64Codec()],\n  ['epoch', getU64Codec()],\n  ['custodian', fixCodecSize(getBytesCodec(), 32)],\n]);\nconst metaCodec = getStructCodec([\n  ['rentExemptReserve', getU64Codec()],\n  ['authorized', authorizedCodec],\n  ['lockup', lockupCodec],\n]);\nconst delegationCodec = getStructCodec([\n  ['voterPubkey', fixCodecSize(getBytesCodec(), 32)],\n  ['stake', getU64Codec()],\n  ['activationEpoch', getU64Codec()],\n  ['deactivationEpoch', getU64Codec()],\n  ['unused', getU64Codec()],\n]);\nconst stakeCodec = getStructCodec([\n  ['delegation', delegationCodec],\n  ['creditsObserved', getU64Codec()],\n]);\nexport const stakeAccountCodec = getStructCodec([\n  ['discriminant', getU32Codec()],\n  ['meta', metaCodec],\n  ['stake', stakeCodec],\n]);\n\nconst stakeHistoryEntryCodec = getStructCodec([\n  ['epoch', getU64Codec()],\n  ['effective', getU64Codec()],\n  ['activating', getU64Codec()],\n  ['deactivating', getU64Codec()],\n]);\nexport const stakeHistoryCodec = getArrayCodec(stakeHistoryEntryCodec, {\n  size: getU64Codec(),\n});\n\nexport interface StakeAccount {\n  discriminant: number;\n  meta: Meta;\n  stake: Stake;\n}\n\nexport interface Meta {\n  rentExemptReserve: bigint;\n  authorized: Authorized;\n  lockup: Lockup;\n}\n\nexport interface Authorized {\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}\n\nexport interface Lockup {\n  unixTimestamp: bigint;\n  epoch: bigint;\n  custodian: Uint8Array;\n}\n\nexport interface Stake {\n  delegation: Delegation;\n  creditsObserved: bigint;\n}\n\nexport interface Delegation {\n  voterPubkey: ReadonlyUint8Array;\n  stake: bigint;\n  activationEpoch: bigint;\n  deactivationEpoch: bigint;\n  unused: bigint;\n}\n\nexport interface StakeHistoryEntry {\n  epoch: bigint;\n  effective: bigint;\n  activating: bigint;\n  deactivating: bigint;\n}\n","import {\n  assertAccountExists,\n  decodeAccount,\n  fetchEncodedAccount,\n} from '@solana/accounts';\nimport { Address } from '@solana/addresses';\nimport { Rpc, SolanaRpcApi } from '@solana/rpc';\nimport { SYSVAR_STAKE_HISTORY_ADDRESS } from '@solana/sysvars';\nimport { stakeAccountCodec, stakeHistoryCodec } from './stake';\nimport { getStakeActivatingAndDeactivating } from './delegation';\n\nexport interface StakeActivation {\n  status: string;\n  active: bigint;\n  inactive: bigint;\n}\n\nexport async function getStakeActivation(\n  rpc: Rpc<SolanaRpcApi>,\n  stakeAddress: Address\n): Promise<StakeActivation> {\n  const [epochInfo, stakeAccount, stakeHistory] = await Promise.all([\n    rpc.getEpochInfo().send(),\n    (async () => {\n      const stakeAccountEncoded = await fetchEncodedAccount(rpc, stakeAddress);\n      assertAccountExists(stakeAccountEncoded);\n      const stakeAccount = decodeAccount(\n        stakeAccountEncoded,\n        stakeAccountCodec\n      );\n      if (stakeAccount.data.discriminant === 0) {\n        throw new Error('');\n      }\n      return stakeAccount;\n    })(),\n    (async () => {\n      const stakeHistoryAccountEncoded = await fetchEncodedAccount(\n        rpc,\n        SYSVAR_STAKE_HISTORY_ADDRESS\n      );\n      assertAccountExists(stakeHistoryAccountEncoded);\n      const stakeHistory = decodeAccount(\n        stakeHistoryAccountEncoded,\n        stakeHistoryCodec\n      );\n      return stakeHistory;\n    })(),\n  ]);\n\n  const rentExemptReserve = stakeAccount.data.meta.rentExemptReserve;\n  if (stakeAccount.data.discriminant === 1) {\n    return {\n      status: 'inactive',\n      active: BigInt(0),\n      inactive: stakeAccount.lamports - rentExemptReserve,\n    };\n  }\n\n  // THE HARD PART\n  const { effective, activating, deactivating } =\n    getStakeActivatingAndDeactivating(\n      stakeAccount.data.stake.delegation,\n      epochInfo.epoch,\n      stakeHistory.data\n    );\n\n  let status;\n  if (deactivating > 0) {\n    status = 'deactivating';\n  } else if (activating > 0) {\n    status = 'activating';\n  } else if (effective > 0) {\n    status = 'active';\n  } else {\n    status = 'inactive';\n  }\n  const inactive = stakeAccount.lamports - effective - rentExemptReserve;\n\n  return {\n    status,\n    active: effective,\n    inactive,\n  };\n}\n"]}